{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/suvendu-sarangi089/OCAC_PYTHON/blob/main/Assignment%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "697caf9e-6072-490e-8131-e14edf6dcdfe",
      "metadata": {
        "id": "697caf9e-6072-490e-8131-e14edf6dcdfe"
      },
      "source": [
        "### A . Assignment Questions on Operators\n",
        "\n",
        "1. **Arithmetic Operators**\n",
        "    - Write a program that takes two numbers from the user.\n",
        "    - Perform and print the results of addition, subtraction, multiplication, division, and modulus operations.\n",
        "\n",
        "2. **Relational Operators**\n",
        "    - Write a program that takes two numbers from the user.\n",
        "    - Use relational operators (`>`, `<`, `>=`, `<=`, `==`, `!=`) to compare these numbers and print the results.\n",
        "\n",
        "3. **Logical Operators**\n",
        "    - Write a program that takes two boolean values from the user.\n",
        "    - Perform and print the results of logical AND, logical OR, and logical NOT operations.\n",
        "\n",
        "4. **Assignment Operators**\n",
        "    - Write a program that initializes a variable `x` with the value `10`.\n",
        "    - Use assignment operators (`+=`, `-=`, `*=`, `/=`, `%=`, `**=`, `//=`) to modify `x` and print the results after each operation.\n",
        "\n",
        "5. **Bitwise Operators**\n",
        "    - Write a program that takes two integers from the user.\n",
        "    - Perform and print the results of bitwise AND, OR, XOR, NOT, left shift, and right shift operations.\n",
        "\n",
        "6. **Compound Expressions**\n",
        "    - Write a program that evaluates a compound expression involving multiple arithmetic and relational operators.\n",
        "    - Example: Calculate the value of `3 * (x + y) / 2 > z` where `x`, `y`, and `z` are inputs from the user.\n",
        "\n",
        "7. **Membership Operators**\n",
        "    - Write a program that takes a string and a character from the user.\n",
        "    - Use membership operators (`in`, `not in`) to check if the character is present in the string and print the result.\n",
        "\n",
        "8. **Identity Operators**\n",
        "    - Write a program that initializes two lists with the same values.\n",
        "    - Use identity operators (`is`, `is not`) to check if the lists are the same object and print the result.\n",
        "\n",
        "9. **Precedence and Associativity**\n",
        "    - Write a program that demonstrates the precedence and associativity of different operators.\n",
        "    - Example: Evaluate the expression `3 + 4 * 2 / (1 - 5) ** 2` and print the result.\n",
        "\n",
        "10. **Operator Overloading**\n",
        "    - Create a class `Vector` that represents a mathematical vector.\n",
        "    - Implement operator overloading for addition, subtraction, and multiplication (dot product) for `Vector` objects.\n",
        "    - Write a program to demonstrate the usage of these overloaded operators.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c98161d7-a8cc-468c-a32f-89a9daf812e0",
      "metadata": {
        "id": "c98161d7-a8cc-468c-a32f-89a9daf812e0"
      },
      "source": [
        "### B . Assignment Questions on Python Operators\n",
        "\n",
        "1. **Basic Arithmetic Operations**\n",
        "    - Write a program that asks the user to enter two numbers.\n",
        "    - Perform addition, subtraction, multiplication, division, and modulus operations on these numbers.\n",
        "    - Print the results of each operation.\n",
        "\n",
        "2. **Comparison Operators**\n",
        "    - Write a program that takes two numbers from the user.\n",
        "    - Use comparison operators to determine and print whether the first number is greater than, less than, or equal to the second number.\n",
        "\n",
        "3. **Logical Operators**\n",
        "    - Write a program that takes two boolean values from the user.\n",
        "    - Perform logical AND, OR, and NOT operations on these values.\n",
        "    - Print the results of each operation.\n",
        "\n",
        "4. **Compound Assignment Operators**\n",
        "    - Assign the value `10` to a variable `x`.\n",
        "    - Use compound assignment operators (`+=`, `-=`, `*=`, `/=`, `%=`) to modify the value of `x` and print the result after each operation.\n",
        "\n",
        "5. **Bitwise Operators**\n",
        "    - Write a program that takes two integers from the user.\n",
        "    - Perform bitwise AND, OR, XOR, and NOT operations on these numbers.\n",
        "    - Print the results of each operation.\n",
        "\n",
        "6. **Exponentiation Operator**\n",
        "    - Write a program that asks the user to enter a base and an exponent.\n",
        "    - Calculate and print the result using the exponentiation operator (`**`).\n",
        "\n",
        "7. **Floor Division Operator**\n",
        "    - Write a program that asks the user to enter two numbers.\n",
        "    - Perform floor division on these numbers and print the result.\n",
        "\n",
        "8. **Operator Precedence**\n",
        "    - Write a program that evaluates the following expression and prints the result: \\( 3 + 5 \\times 2 - 8 / 4 \\).\n",
        "    - Explain the order in which the operations are performed.\n",
        "\n",
        "9. **Ternary Operator (Conditional Expression)**\n",
        "    - Write a program that asks the user to enter two numbers.\n",
        "    - Use a ternary operator to determine and print the larger of the two numbers.\n",
        "\n",
        "10. **Membership Operators**\n",
        "    - Write a program that asks the user to enter a character.\n",
        "    - Check if the character is a vowel (a, e, i, o, u) using the `in` operator and print an appropriate message."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "db060d41-72af-4f25-9dbe-8fd1f77920b4",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "db060d41-72af-4f25-9dbe-8fd1f77920b4",
        "outputId": "0c07c068-8491-4f49-c198-9567d61d5732"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter First NUmber :20\n",
            "Enter Second NUmber :35\n",
            "Addition of two number is= 55\n",
            "Subtraction of two number is= -15\n",
            "Multiplication of two number is= 700\n",
            "Division of two number is= 0.5714285714285714\n",
            "Modulus of two number is= 20\n"
          ]
        }
      ],
      "source": [
        "\n",
        "#1.Arithmetic Operators\n",
        "\n",
        "#Write a program that takes two numbers from the user.\n",
        "\n",
        "a =int(input(\"Enter First NUmber :\"))\n",
        "b =int(input(\"Enter Second NUmber :\"))\n",
        "#Perform and print the results of addition, subtraction, multiplication, division, and modulus operations.\n",
        "print(\"Addition of two number is=\",a+b)\n",
        "print(\"Subtraction of two number is=\",a-b)\n",
        "print(\"Multiplication of two number is=\",a*b)\n",
        "print(\"Division of two number is=\",a/b)\n",
        "print(\"Modulus of two number is=\",a%b)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "mhvCikTFP0jn",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mhvCikTFP0jn",
        "outputId": "9adccfdd-8f1d-477b-d309-a4b71d61da57"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter First NUmber :20\n",
            "Enter Second NUmber :10\n",
            "> True\n",
            "< False\n",
            ">= True\n",
            "<= False\n",
            "== False\n",
            "!= True\n"
          ]
        }
      ],
      "source": [
        "#2.Comparison Operators\n",
        "\n",
        "#Write a program that takes two numbers from the user.\n",
        "\n",
        "a =int(input(\"Enter First NUmber :\"))\n",
        "b =int(input(\"Enter Second NUmber :\"))\n",
        "#Use comparison operators to determine and print whether the first number is greater than, less than, or equal to the second number.\n",
        "print('>',a>b)\n",
        "print('<',a<b)\n",
        "print('>=',a>=b)\n",
        "print('<=',a<=b)\n",
        "print('==',a == b)\n",
        "print('!=',a!=b)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3oieRxEBQsrs",
      "metadata": {
        "id": "3oieRxEBQsrs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "16843bc1-1f04-4fa9-89e2-8175964f8450"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the value:0\n",
            "Enter the 2nd value:1\n",
            "Result of Logical AND: 0\n",
            "Result of Logical OR: 1\n",
            "Result of Logical NOT: True\n"
          ]
        }
      ],
      "source": [
        "#3.Logical Operators\n",
        "\n",
        "#Write a program that takes two boolean values from the user.\n",
        "x=eval(input(\"Enter the value:\"))\n",
        "y=eval(input(\"Enter the 2nd value:\"))\n",
        "#Perform and print the results of logical AND, logical OR, and logical NOT operations.\n",
        "print(\"Result of Logical AND:\",x and y)\n",
        "print(\"Result of Logical OR:\",x or y)\n",
        "print(\"Result of Logical NOT:\",not x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "YQ3aqogicT2h",
      "metadata": {
        "id": "YQ3aqogicT2h",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fad7c9e8-d6e1-4eb6-b233-aecd685f8eb2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+=: 20\n",
            "-=: 15\n",
            "*=: 75\n",
            "/=: 15.0\n",
            "%=: 0.0\n",
            "**=: 0.0\n",
            "//=: 0.0\n"
          ]
        }
      ],
      "source": [
        "#4.Assignment Operators\n",
        "\n",
        "#Write a program that initializes a variable x with the value 10.\n",
        "x=10\n",
        "#Use assignment operators (+=, -=, *=, /=, %=, **=, //=) to modify x and print the results after each operation.\n",
        "x+=5\n",
        "print(\"+=:\",x)\n",
        "x-=5\n",
        "print(\"-=:\",x)\n",
        "x*=5\n",
        "print(\"*=:\",x)\n",
        "x/=5\n",
        "print(\"/=:\",x)\n",
        "x%=5\n",
        "print(\"%=:\",x)\n",
        "x**=5\n",
        "print(\"**=:\",x)\n",
        "x//=5\n",
        "print(\"//=:\",x)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#5.Bitwise Operators\n",
        "\n",
        "#Write a program that takes two integers from the user.\n",
        "a=int(input(\"Enter First NUmber :\"))\n",
        "b=int(input(\"Enter Second NUmber :\"))\n",
        "\n",
        "#Perform and print the results of bitwise AND, OR, XOR, NOT, left shift, and right shift operations.\n",
        "print(\"Bitwise AND:\",a&b)\n",
        "print(\"Bitwise OR:\",a|b)\n",
        "print(\"Bitwise XOR:\",a^b)\n",
        "print(\"Bitwise NOT:\",~a)\n",
        "print(\"Left Shift:\",a<<b)\n",
        "print(\"Right Shift:\",a>>b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PVHx4hgYz1c-",
        "outputId": "af3916e1-8a38-4625-88ca-96fb04bd53fa"
      },
      "id": "PVHx4hgYz1c-",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter First NUmber :7\n",
            "Enter Second NUmber :4\n",
            "Bitwise AND: 4\n",
            "Bitwise OR: 7\n",
            "Bitwise XOR: 3\n",
            "Bitwise NOT: -8\n",
            "Left Shift: 112\n",
            "Right Shift: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6.Compound Expressions\n",
        "\n",
        "#Write a program that evaluates a compound expression involving multiple arithmetic and relational operators.\n",
        "\n",
        "#Example: Calculate the value of 3 * (x + y) / 2 > z where x, y, and z are inputs from the user.\n",
        "x=int(input(\"Enter First NUmber :\"))\n",
        "y=int(input(\"Enter Second NUmber :\"))\n",
        "z=int(input(\"Enter Third NUmber :\"))\n",
        "print(\"Expression is=\",3 * (x + y) / 2 > z )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DibQGlLs10qP",
        "outputId": "7836dbd0-df94-4437-fd94-7d8121d2351f"
      },
      "id": "DibQGlLs10qP",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter First NUmber :2\n",
            "Enter Second NUmber :3\n",
            "Enter Third NUmber :4\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#7.Membership Operators\n",
        "\n",
        "#Write a program that takes a string and a character from the user.\n",
        "a=input(\"Enter the string:\")\n",
        "b=input(\"Enter the character:\")\n",
        "#Use membership operators (in, not in) to check if the character is present in the string and print the result.\n",
        "print(\"in:\",b in a)\n",
        "print(\"not in:\",b not in a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eqBL0qWb4P6x",
        "outputId": "6650552d-92a7-4631-9edf-522eeae30948"
      },
      "id": "eqBL0qWb4P6x",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the string:suvedu\n",
            "Enter the character:s\n",
            "in: True\n",
            "not in: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#8.Identity Operators\n",
        "\n",
        "#Write a program that initializes two lists with the same values.\n",
        "a=5\n",
        "b=5\n",
        "l1=[a]\n",
        "l2=[b]\n",
        "#Use identity operators (is, is not) to check if the lists are the same object and print the result.\n",
        "\n",
        "print(l1 is l2)\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TBkEP7P65OVj",
        "outputId": "b1506543-ae6e-4d52-de2e-9af9bc5f11b5"
      },
      "id": "TBkEP7P65OVj",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9.Precedence and Associativity\n",
        "\n",
        "#Write a program that demonstrates the precedence and associativity of different operators.\n",
        "\n",
        "#Example: Evaluate the expression 3 + 4 * 2 / (1 - 5) ** 2 and print the result.\n",
        "a=3 + 4 * 2 / (1 - 5) ** 2\n",
        "print(a)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J535L-Rc568I",
        "outputId": "1bf4f8e4-9a50-4099-c0be-f7061c127d00"
      },
      "id": "J535L-Rc568I",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 10.Operator Overloading\n",
        "class Vector:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "\n",
        "    def __add__(self, other):\n",
        "        return Vector(self.x + other.x, self.y + other.y)\n",
        "\n",
        "    def __sub__(self, other):\n",
        "        return Vector(self.x - other.x, self.y - other.y)\n",
        "\n",
        "    def __mul__(self, other):\n",
        "        return self.x * other.x + self.y * other.y\n",
        "\n",
        "# Example usage\n",
        "v1 = Vector(1, 2)\n",
        "v2 = Vector(3, 4)\n",
        "\n",
        "v3 = v1 + v2\n",
        "v4 = v1 - v2\n",
        "v5 = v1 * v2\n",
        "\n",
        "print(\"v1 + v2 =\", v3.x, v3.y)\n",
        "print(\"v1 - v2 =\", v4.x, v4.y)\n",
        "print(\"v1 * v2 =\", v5)"
      ],
      "metadata": {
        "id": "gWPrPvyZDQ8-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9196ada-7593-4221-8a73-68dcbbbb6294"
      },
      "id": "gWPrPvyZDQ8-",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "v1 + v2 = 4 6\n",
            "v1 - v2 = -2 -2\n",
            "v1 * v2 = 11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "23-hJkujGcVt"
      },
      "id": "23-hJkujGcVt",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}